name: Release Build

on:
  push:
    # Запускать только при создании тегов версий
    tags:
      - "v*.*.*"
  # Разрешить ручной запуск для тестирования
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        default: "v0.0.1"
permissions: write-all
env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short
concurrency:
  # only allow per workflow per commit (and not pr) to run at a time
  group: "${{ github.workflow }} - ${{ github.head_ref || github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  check_tag_version:
    name: Check Release Tag and package.json Version Consistency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check tag and package.json version
        run: |
          TAG_REF="${GITHUB_REF##*/}"
          echo "Current tag: $TAG_REF"
          PKG_VERSION=$(jq -r .version package.json)
          echo "package.json version: $PKG_VERSION"
          if [[ "$TAG_REF" != "v$PKG_VERSION" ]]; then
            echo "Tag ($TAG_REF) does not match package.json version (v$PKG_VERSION)."
            exit 1
          fi
          echo "Tag and package.json version are consistent."

  create_release_notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch UPDATE logs
        id: fetch_update_logs
        run: |
          if [ -f "UPDATELOG.md" ]; then
            UPDATE_LOGS=$(awk '/^## v/{if(flag) exit; flag=1} flag' UPDATELOG.md)
            if [ -n "$UPDATE_LOGS" ]; then
              echo "Found update logs"
              echo "UPDATE_LOGS<<EOF" >> $GITHUB_ENV
              echo "$UPDATE_LOGS" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            else
              echo "No update sections found in UPDATELOG.md"
            fi
          else
            echo "UPDATELOG.md file not found"
          fi
        shell: bash

      - name: Get Version
        run: |
          sudo apt-get update
          sudo apt-get install jq
          echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Europe/Moscow date)" >> $GITHUB_ENV

      - run: |
          if [ -z "$UPDATE_LOGS" ]; then
            echo "No update logs found, using default message"
            UPDATE_LOGS="More new features are now supported. Check for detailed changelog soon."
          else
            echo "Using found update logs"
          fi

          cat > release.txt << EOF
          $UPDATE_LOGS

          ### Windows (Win7 is no longer supported)
          #### Normal version (recommended)
          <a href="https://github.com/catoo-hub/kitsura-vpn/releases/download/v${{ env.VERSION }}/Kitsura.VPN_x64-setup.exe"><img src="https://badgen.net/badge/icon/x64?icon=windows&label=exe"></a><br>
          <a href="https://github.com/catoo-hub/kitsura-vpn/releases/download/v${{ env.VERSION }}/Kitsura.VPN_arm64-setup.exe"><img src="https://badgen.net/badge/icon/arm64?icon=windows&label=exe"></a>
          #### Portable version is no longer available with many problems
          #### Built-in Webview version 2 (large size, only used in enterprise version of the system or can not install webview2)
          <a href="https://github.com/catoo-hub/kitsura-vpn/releases/download/v${{ env.VERSION }}/Kitsura.VPN_x64_fixed_webview2-setup.exe"><img src="https://badgen.net/badge/icon/x64?icon=windows&label=exe"></a><br>
          <a href="https://github.com/catoo-hub/kitsura-vpn/releases/download/v${{ env.VERSION }}/Kitsura.VPN_arm64_fixed_webview2-setup.exe"><img src="https://badgen.net/badge/icon/arm64?icon=windows&label=exe"></a>

          Created at ${{ env.BUILDTIME }}.
          EOF

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{env.VERSION}}
          name: "Kitsura VPN v${{env.VERSION}}"
          body_path: release.txt
          token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release Build
    needs: [check_tag_version, create_release_notes]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          save-if: false

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install and check
        run: |
          pnpm i
          pnpm run prebuild ${{ matrix.target }}

      - name: Install minisign (Windows)
        if: runner.os == 'Windows'
        run: |
          # Download minisign binary directly
          $minisignUrl = "https://github.com/jedisct1/minisign/releases/download/0.12/minisign-0.12-win64.zip"
          $minisignZip = "$env:TEMP\minisign.zip"
          $minisignDir = "$env:TEMP\minisign"
          
          Write-Host "Downloading minisign..."
          Invoke-WebRequest -Uri $minisignUrl -OutFile $minisignZip
          
          Write-Host "Extracting minisign..."
          Expand-Archive -Path $minisignZip -DestinationPath $minisignDir -Force
          
          # Add x64 version to PATH (not aarch64)
          $minisignPath = Join-Path $minisignDir "minisign-win64\x64"
          echo $minisignPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "Minisign x64 path added: $minisignPath"
          Write-Host "Minisign installed successfully"

      - name: Tauri build
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tauriScript: pnpm
          args: --target ${{ matrix.target }}

      - name: Rename Artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $version = "${{steps.build.outputs.appVersion}}"
          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe"
          foreach ($file in $files) {
            $newName = $file.Name -replace "_${version}_", "_" 
            Rename-Item $file.FullName $newName
          }

      - name: Sign files with minisign (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Setup minisign key from secrets
          $keyDir = "$env:USERPROFILE\.minisign"
          New-Item -ItemType Directory -Force -Path $keyDir
          echo "${{ secrets.MINISIGN_PRIVATE_KEY }}" | Out-File -FilePath "$keyDir\minisign.key" -Encoding utf8

          # Sign all setup files
          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*setup*.exe"
          foreach ($file in $files) {
            Write-Host "Signing: $($file.Name)"
            minisign -Sm $file.FullName -s "$keyDir\minisign.key"
          }
          
          # List created signature files for debugging
          Write-Host "Created signature files:"
          Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*setup*.minisig" | ForEach-Object { Write-Host $_.Name }
        env:
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}

      - name: Upload Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body: ${{ steps.version.outputs.body }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*.exe,src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*.minisig"

  release-for-fixed-webview2:
    name: Release Build for Fixed WebView2
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          save-if: false

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install and check
        run: |
          pnpm i
          pnpm run prebuild ${{ matrix.target }}

      - name: Install minisign (Windows)
        if: runner.os == 'Windows'
        run: |
          # Download minisign binary directly
          $minisignUrl = "https://github.com/jedisct1/minisign/releases/download/0.12/minisign-0.12-win64.zip"
          $minisignZip = "$env:TEMP\minisign.zip"
          $minisignDir = "$env:TEMP\minisign"
          
          Write-Host "Downloading minisign..."
          Invoke-WebRequest -Uri $minisignUrl -OutFile $minisignZip
          
          Write-Host "Extracting minisign..."
          Expand-Archive -Path $minisignZip -DestinationPath $minisignDir -Force
          
          # Add x64 version to PATH (not aarch64)
          $minisignPath = Join-Path $minisignDir "minisign-win64\x64"
          echo $minisignPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "Minisign x64 path added: $minisignPath"
          Write-Host "Minisign installed successfully"

      - name: Download WebView2 Runtime
        run: |
          Invoke-WebRequest -Uri https://github.com/westinyang/WebView2RuntimeArchive/releases/download/133.0.3065.92/Microsoft.WebView2.FixedVersionRuntime.133.0.3065.92.${{ matrix.arch }}.cab -OutFile Microsoft.WebView2.FixedVersionRuntime.133.0.3065.92.${{ matrix.arch }}.cab
          expand .\Microsoft.WebView2.FixedVersionRuntime.133.0.3065.92.${{ matrix.arch }}.cab -F:* ./src-tauri
          Remove-Item .\src-tauri\tauri.windows.conf.json
          Rename-Item .\src-tauri\webview2.${{ matrix.arch }}.json tauri.windows.conf.json

      - name: Tauri build
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tauriScript: pnpm
          args: --target ${{ matrix.target }}

      - name: Rename
        run: |
          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe"
          foreach ($file in $files) {
            $newName = $file.Name -replace "_${{steps.build.outputs.appVersion}}_", "_" -replace "-setup\.exe$", "_fixed_webview2-setup.exe"
            Rename-Item $file.FullName $newName
          }

          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*.nsis.zip"
          foreach ($file in $files) {
            $newName = $file.Name -replace "_${{steps.build.outputs.appVersion}}_", "_" -replace "-setup\.nsis\.zip$", "_fixed_webview2-setup.nsis.zip"
            Rename-Item $file.FullName $newName
          }

          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe.sig"
          foreach ($file in $files) {
            $newName = $file.Name -replace "_${{steps.build.outputs.appVersion}}_", "_" -replace "-setup\.exe\.sig$", "_fixed_webview2-setup.exe.sig"
            Rename-Item $file.FullName $newName
          }

      - name: Sign files with minisign (Windows WebView2)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Setup minisign key from secrets
          $keyDir = "$env:USERPROFILE\.minisign"
          New-Item -ItemType Directory -Force -Path $keyDir
          echo "${{ secrets.MINISIGN_PRIVATE_KEY }}" | Out-File -FilePath "$keyDir\minisign.key" -Encoding utf8
          
          # Sign all setup files
          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*setup*.exe"
          foreach ($file in $files) {
            Write-Host "Signing: $($file.Name)"
            minisign -Sm $file.FullName -s "$keyDir\minisign.key"
          }
          
          # List created signature files for debugging
          Write-Host "Created signature files:"
          Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*setup*.minisig" | ForEach-Object { Write-Host $_.Name }
        env:
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{steps.build.outputs.appVersion}}
          name: "Kitsura VPN v${{steps.build.outputs.appVersion}}"
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*.minisig

      - name: Portable Bundle
        run: pnpm portable-fixed-webview2 ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-update:
    name: Release Update
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install
        run: pnpm i

      - name: Release updater file
        run: pnpm updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-update-for-fixed-webview2:
    runs-on: ubuntu-latest
    needs: [release-for-fixed-webview2]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install
        run: pnpm i

      - name: Release updater file
        run: pnpm updater-fixed-webview2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push-notify-to-telegram:
    runs-on: ubuntu-latest
    needs: [release-update, release-update-for-fixed-webview2]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch UPDATE logs
        id: fetch_update_logs
        run: |
          if [ -f "UPDATELOG.md" ]; then
            UPDATE_LOGS=$(awk '/^## v/{if(flag) exit; flag=1} flag' UPDATELOG.md)
            if [ -n "$UPDATE_LOGS" ]; then
              echo "Found update logs"
              echo "UPDATE_LOGS<<EOF" >> $GITHUB_ENV
              echo "$UPDATE_LOGS" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            else
              echo "No update sections found in UPDATELOG.md"
            fi
          else
            echo "UPDATELOG.md file not found"
          fi
        shell: bash

      - name: Get Version
        run: |
          sudo apt-get update
          sudo apt-get install jq
          echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Europe/Moscow date)" >> $GITHUB_ENV

      - run: |
          if [ -z "$UPDATE_LOGS" ]; then
            echo "No update logs found, using default message"
            UPDATE_LOGS="More new features are now supported. Check for detailed changelog soon."
          else
            echo "Using found update logs"
            UPDATE_LOGS=$(echo "$UPDATE_LOGS" | sed 's/^## \(v.*\)/\*\1\*/')
          fi

          cat > release.txt << EOF
          Вышло обновление!

          $UPDATE_LOGS

          [Ссылка на релиз](https://github.com/catoo-hub/kitsura-vpn/releases/latest)

          EOF

      - name: notify to channel
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO_CHANNEL }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message_file: release.txt
          format: markdown
